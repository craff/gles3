synopsis: "OpenGL ES 3.0 bindings"
description:
"""
This project aims at providing a portable way to write OpenGL (more precisely
OpenGL ES) application in OCaml. It comes in three parts:
* Low level bindings allowing direct calls to OpenGL ES functions. These
  bindings try to remain reasonably type-safe using polymorphic variants
  to encode enumeration types. The low level bindings also provide some
  sanity checks for the size of bigarrays which allow to capture quite a
  lot of errors with clear messages.
* High level bindings providing auxiliary functions like matrix inversion
  to ease the development. For instance, to use shaders with the high
  level bindings, you may use `compile_shader` with the sources code, to
  get a value of type `unit program`. Then, you can set the variables of
  the shaders (uniform or attributes), either as constant or function and
  get an OCaml function to finally run the shaders.
* A wrapper to open a window, start the main loop and interact. Currently
  only EGL under X11 is supported, but we would like to support different
  platforms in the future (Windows, Android, iOS, Wayland, ...) without
  changing the interface.
"""
opam-version: "2.0"
maintainer: "Christophe Raffalli <christophe@raffalli.eu>"
bug-reports: "https://github.com/craff/gles3/issues"
homepage: "https://github.com/craff/gles3"
dev-repo: "git+https://github.com/craff/gles3.git"
authors: [
  "Christophe Raffalli <christophe@raffalli.eu>"
  "Alexandre Miquel <amiquel@fing.edu.uy>"
  "Rodolphe Lepigre <lepigre@mpi-sws.org>"
]
license: "LGPL-3.0"
doc: "https://github.com/craff/gles3"

depends: [
  "ocaml" { >= "4.02.0" }
  "stdlib-shims"
]

build: [
  [ "dune" "subst" ]
  [ "dune" "build" "-p" name "-j" jobs ]
]
